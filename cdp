ex1

%{ 
#include<stdio.h> 
#include<stdlib.h> 
  #include<string.h> 
#define MAX_IDENTIFIER_LENGTH 50 
%} 
%option noyywrap 
%option yylineno 
void addtosymboltable(const char*) 
%% 
[\t] /*ignore whitespace*/ 
\n /*ignore newline*/ 
\/\*([^*]|\*+[^*/])*\*+\/ /*ignore comments*/ 
 [0-9]+ {printf("Constant:%s \n",yytext);} 
= {printf("%s is an Assignment Operator\n",yytext);} 
\* | 
\+ | 
\- {printf("%s is a Operator\n",yytext);} 
if|else|int|float|char|void {printf("%s is a keyword",yytext);} 
[a-zA-Z][a-zA-Z0-9]* {printf("identifier:%s\n",yytext);addtosymboltable(yytext);} 
. {printf("Invalid token:%s \n",yytext);} 
%% 
typedef struct 
{ 
char name[MAX_IDENTIFIER_LENGTH]; 
} Symbol; 

Symbol symbol_table[100];  
int symbol_count=0; 

void addtosymboltable(const char * identifier) 
{  
if(symbol_count < 100) 
{ 
strncpy(symbol_table[symbol_count].name,identifier,MAX_IDENTIFIER_LENGTH-1);  
symbol_table[symbol_count].name[MAX_IDENTIFIER_LENGTH-1]='\0'; 
symbol_count++; 
printf("Identifier %s is entered in the symbol table\n",identifier); 
}  
else 
{ 
printf("Symbol table is full.Cannot add more identifier.\n"); 
exit(0); 
} 
} 
int main() 
{ 
yylex(); return 1; 
} 


ex21

%option noyywrap
%{ 
int COMMENT=0; 
%} 

identifier[a-zA-Z][a-zA-Z0-9]* 

%% 
#.* {printf("\n %s is a preprocessor directive",yytext); } 
 int |float | void | main | if | else | printf | scanf | for | 
char | getch | 
while {printf("\n %s is a keyword",yytext);}"/*" {COMMENT=1;} 
"*/" {COMMENT=0;} 
{identifier}\( {if(!COMMENT)printf("\n Function:\t %s",yytext);} 
\{ {if(!COMMENT)printf("\n Block begins");} 
\} {if(!COMMENT)printf("\n Block ends");} 
{identifier}(\[[0-9]*\])? {if(!COMMENT)printf("\n %s is an Identifier",yytext);} 
\".*\" {if(!COMMENT)printf("\n %s is a string",yytext);} 
[0-9]+ {if(!COMMENT)printf("\n %s is a number",yytext);} 
\)(\;)? {if(!COMMENT)printf("\t");ECHO;printf("\n");} 
\(ECHO; 
= {if(!COMMENT)printf("\n %s is an Assignment operator",yytext);} 
\<= | 
\>= | 
\< | 
== {if(!COMMENT)printf("\n %s is a relational operator",yytext);} 
.|\n 
%% 
int main(int argc, char **argv) 
{ 
 if(argc>1) 
	{ 
	FILE*file;  
	file=fopen(argv[1],"r"); if(!file) 
	{ 
	printf("\n Could not open the file:%s ",argv[1]); exit(0); 
	} 
	yyin=file; 
	} 
yylex(); printf("\n\n"); 
return 0; 
} 

 
int yywrap() 
{
   return 1;
}


ex3a-1
%{
#include "yacc.tab.h"
%}

%option noyywrap

%%
[0-9]+          { return NUMBER; }
[\t ]+          ;  /* Ignore whitespaces */
"+"             { return PLUS; }
"-"             { return MINUS; }
"*"             { return MULTIPLY; }
"/"             { return DIVIDE; }
"("             { return LPAREN; }
")"             { return RPAREN; }
\n              { return 0; } /* End of input */
.               { printf("Invalid character: %s\n", yytext); return 0; }

%%


ex3a-2



%{
#include <stdio.h>
#include <stdlib.h>

void yyerror(const char *s);
%}

%token NUMBER
%token PLUS MINUS MULTIPLY DIVIDE
%token LPAREN RPAREN

%left PLUS MINUS
%left MULTIPLY DIVIDE
%right UMINUS /* Unary minus */

%%

expression:
    expression PLUS expression
  | expression MINUS expression
  | expression MULTIPLY expression
  | expression DIVIDE expression
  | LPAREN expression RPAREN
  | MINUS expression %prec UMINUS
  | NUMBER
  ;

%%

void yyerror(const char *s) {
    printf("Invalid expression: %s\n", s);
}

int main(void) {
    printf("Enter an expression: ");
    if (yyparse() == 0) {
        printf("The expression is valid.\n");
    } else {
        printf("The expression is invalid.\n");
    }
    return 0;
}



3b-1L


%{
  #include"3b.tab.c"
%}

%%
[a-zA-Z][a-zA-Z0-9]* {return letter;}
[0-9] {return digit;}
. {return yytext[0];}
\n {return 0;}
%%

int yywrap(){
  return 1;
}


-->3b-2y

%{
#include <stdio.h>
int valid = 1;
%}

%token letter
%token digit

%%

start: letter S
    ;

S: letter S
  | digit S
  |
  ;

%% 

int yyerror() {
    printf("\nIt's not an identifier\n");
    valid = 0;
    return 0;
}

int main() {
    printf("Enter a name: ");
    yyparse();

    if (valid) {
        printf("\nIt's an identifier!\n");
    }

    return 0;
}



ex3c-1



%{
#include<stdio.h>
#include "3c.tab.h"
%}
%%
"if" { return IF; }
"else" { return ELSE; }
"while" { return WHILE; }
"for" { return FOR; }
"switch" { return SWITCH; }
"case" { return CASE; }
"default" { return DEFAULT; }
"break" { return BREAK; }
"(" { return OPEN_BRACKET; }
")" { return CLOSE_BRACKET; }
"{" { return OPEN_BRACE; }
"}" { return CLOSE_BRACE; }
";" { return SEMICOLON; }
[\t\n] ;
. ;
%%
int yywrap()
{
return 1;
}



ex3c-2


%{
#include<stdio.h>
int yylex();
%}
%token IF ELSE WHILE FOR SWITCH CASE DEFAULT OPEN_BRACE CLOSE_BRACE
SEMICOLON COLON OPEN_BRACKET CLOSE_BRACKET BREAK
%%
program: statement
| program statement
;
statement:if_statement
|while_loop
|switch_case_statement
|for_loop
;
if_statement:IF OPEN_BRACKET expression_opt CLOSE_BRACKET OPEN_BRACE
expression_opt CLOSE_BRACE ELSE OPEN_BRACE expression_opt CLOSE_BRACE
{
printf("Recognized IF Else statement\n");
}
;
while_loop:WHILE OPEN_BRACKET expression_opt CLOSE_BRACKET OPEN_BRACE
expression_opt CLOSE_BRACE
{
printf("Recognized WHILE loop\n");
}
;
switch_case_statement:SWITCH OPEN_BRACKET expression_opt CLOSE_BRACKET
OPEN_BRACE case_list CLOSE_BRACE
{
printf("Recognized SWITCH_CASE statement with DEFAULT\n");
}
;
for_loop:FOR OPEN_BRACKET expression_opt SEMICOLON expression_opt
CLOSE_BRACKET OPEN_BRACE expression_opt CLOSE_BRACE
{
printf("Recognized FOR loop\n");
}
;
case_list:CASE expression COLON expression BREAK
SEMICOLON DEFAULT COLON expression_opt
;
expression_opt:/*empty*/
|expression
|expression SEMICOLON
;
expression:
;
%%
int yyerror(const char *s)
{
fprintf(stderr,"Error=%s\n", s);
return 1;
}
int main() {
if(yyparse()==0){
printf("Parsing completed successfully\n");
}
else{
fprintf(stderr,"Parsing encountered errors\n");
}
return 0;
}



ex-3d-1



%{
#include <stdio.h>
#include "3d.tab.c"
extern int yylval;
%}
%%

[0-9]+ {
yylval = atoi(yytext);
return NUMBER;
}
[ \t] ;
[\n] return 0;
. {return yytext[0];}
%%
int yywrap()
{
return 1;
}


ex3d-2



%{
#include <stdio.h>
int flag = 0;
%}

%token NUMBER

%left '+' '-'
%left '*' '/'
%left '%'
%left '(' ')'

%%

// Grammar rules
ArithmeticExpression: E {
    printf("Result = %d\n", $1);
    return 0;
};

E: E '+' E { $$ = $1 + $3; }
 | E '-' E { $$ = $1 - $3; }
 | E '*' E { $$ = $1 * $3; }
 | E '/' E { $$ = $1 / $3; }
 | E '%' E { $$ = $1 % $3; }
 | '(' E ')' { $$ = $2; }
 | NUMBER { $$ = $1; }
;

%%

// Main function
int main() {
    printf("\nEnter an arithmetic expression that can have operations Addition, Subtraction, Multiplication, Division, Modulus, and Round brackets: ");
    yyparse();
    if (flag == 0) {
        printf("\nEntered arithmetic expression is Valid\n");
    }
    return 0;
}

// Error handling function
void yyerror(const char* s) {
    printf("\nEntered arithmetic expression is Invalid\n");
    flag = 1;
}

------

ex4-1

%{
#include<stdio.h>
#include "4.tab.h"
%}

%%
[0-9]+          { yylval = atoi(yytext); return NUM; }
[ \t]+          ; /* Ignore whitespace */
\n              { return EOL; }
[-+*/()]        { return yytext[0]; }
.               { fprintf(stderr, "Error: Invalid Character\n"); }

%%

int yywrap() { return 1; }



ex-4-2

%{
#include <stdio.h>
#include <stdlib.h>

int temp_count = 0;  // Counter for temporary variables

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}
%}

%token NUM EOL
%left '+' '-'
%left '*' '/'

%%
program: lines
;

lines: lines line
     | line
;

line: expr EOL {
    printf("Result: t%d\n", $1);
}
;

expr: NUM {
    $$ = ++temp_count;
    printf("t%d = %d\n", $$, $1);  // Assigns a temporary for literals
}
| '(' expr ')' {
    $$ = $2;
}
| expr '+' expr {
    $$ = ++temp_count;
    printf("t%d = t%d + t%d\n", $$, $1, $3);  // Create temp for addition
}
| expr '-' expr {
    $$ = ++temp_count;
    printf("t%d = t%d - t%d\n", $$, $1, $3);  // Create temp for subtraction
}
| expr '*' expr {
    $$ = ++temp_count;
    printf("t%d = t%d * t%d\n", $$, $1, $3);  // Create temp for multiplication
}
| expr '/' expr {
    if ($3 == 0) {
        yyerror("Division by zero");
        $$ = 0;
    } else {
        $$ = ++temp_count;
        printf("t%d = t%d / t%d\n", $$, $1, $3);  // Create temp for division
    }
}
;

%%

int main() {
    yyparse();
    return 0;
}

